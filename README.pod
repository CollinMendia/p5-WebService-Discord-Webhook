=pod

=head1 NAME

Net::Discord::Webhook - A module for posting messages to Discord chat service

=head1 SYNOPSIS

    use Net::Discord::Webhook;

    my $webhook = Net::Discord::Webhook( $url );

    $webhook->execute( { content => 'Hello, world!' } );

    sleep(30);

    $webhook->execute( 'Goodbye, world!' );

=head1 DESCRIPTION

This module posts messages to the Discord chat service, using their Webhook
interface.  Webhooks are a simple way to add post-only functions to external
clients, without the need to create a full-fledged client or "bot".

Normally, Webhooks are used to issue a notification to chat channels when an
external event from another site or service occurs, e.g. when a commit is made
to a Git repository, a story is posted to a news site, or a player is fragged
in a game.

An example Discord Webhook URL looks like this:

    https://discordapp.com/api/webhooks/2237...5344/3d89...cf11

where the first magic number ("2237...5344") is the C<id> and the second
("3d89...cf11") is the C<token>.

For more information on Discord Webhooks, see the Discord API documentation
located at L<https://discordapp.com/developers/docs/resources/webhook>.

=head2 Methods

=over

=item C<new>

Constructs and returns a new Net::Discord::Webhook object using the specified
parameters.

This function should be passed a hash reference, containing either a C<url>
key, or C<token> plus C<id> keys, with values matching the Webhook created
via the Discord UI.

An optional parameter C<timeout> can be used to override the default timeout
of the underlying L<HTTP::Tiny> object used for making web requests.

An optional parameter C<verify_SSL> can be used to enable SSL certificate
verification on the underlying L<HTTP::Tiny> object.

As a special case, if C<new> is called with a scalar parameter, it is assumed
to be a C<url>.

=item C<get>

Retrieves server-side information for the Webhook, and caches the result
in the Net::Discord::Webhook object.  No parameters are expected.

Information which can be returned from the remote service include:

=over

=item * guild_id:
The guild ("server") which the Webhook currently posts to, if set

=item * channel_id:
The specific channel which the Webhook posts to

=item * name:
The current display name of the Webhook

=item * avatar:
A URL pointing to the current avatar used by the Webhook

=back

A hash containing the data is returned.  Additionally, the hash values are
copied into the object itself, so they can be later retrieved by calling code
(as in C<$webhook-E<gt>{channel_id}>).

=item C<modify>

Modifies the server-side information for the Webhook.  This can be used to
alter the name the Webhook uses, the avatar, or both.

This function should be passed a hash reference, containing (at least) a
C<name> key or C<avatar> key (or both).

For C<avatar>, the value should be the raw data bytes of a png, jpeg, or gif
image.

=item C<delete>

Deletes the Webhook from the Discord service.

B<Warning!>  Once a Webhook is deleted, the existing token and ID are no
longer valid.  A server administrator will need to re-create the endpoint
through the Discord UI.  Unless you have very good reason to do this, it is
probably best to leave this function alone.

=item C<execute>

Executes a Webhook (posts a message).

=item C<execute_slack>

Executes a Slack-compatible Webhook.

=item C<execute_github>

Executes a Github-compatible Webhook.

=back

=head1 LICENSE

This is released under the Artistic License. See L<perlartistic>.

=head1 AUTHOR

Greg Kennedy - L<https://greg-kennedy.com/>

